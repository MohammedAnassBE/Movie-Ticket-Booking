{
  "version": 3,
  "sources": ["../src/core-constants.ts", "../src/error-constants.ts"],
  "sourcesContent": ["/**\n * The css class added to a node that is selected.\n */\nexport const SELECTED_NODE_CLASS_NAME = 'ProseMirror-selectednode';\n\n/**\n * The css selector for a selected node.\n */\nexport const SELECTED_NODE_CLASS_SELECTOR = `.${SELECTED_NODE_CLASS_NAME}`;\n\n/**\n * ProseMirror uses the Unicode Character 'OBJECT REPLACEMENT CHARACTER'\n * (U+FFFC) as text representation for leaf nodes, i.e. nodes that don't have\n * any content or text property (e.g. hardBreak, emoji, mention, rule) It was\n * introduced because of https://github.com/ProseMirror/prosemirror/issues/262\n * This can be used in an input rule regex to be able to include or exclude such\n * nodes.\n */\nexport const LEAF_NODE_REPLACING_CHARACTER = '\\uFFFC';\n\n/**\n * The null character.\n *\n * See {@link https://stackoverflow.com/a/6380172}\n */\nexport const NULL_CHARACTER = '\\0';\n\n/**\n * Indicates that a state update was caused by an override and not via\n * transactions or user commands.\n *\n * This is the case when `setContent` is called and for all `controlled` updates\n * within a `react` editor instance.\n */\nexport const STATE_OVERRIDE = '__state_override__';\n\n/**\n * The global name for the module exported by the remirror webview bundle.\n */\nexport const REMIRROR_WEBVIEW_NAME = '$$__REMIRROR_WEBVIEW_BUNDLE__$$';\n\n/**\n * A character useful for separating inline nodes.\n *\n * @remarks\n * Typically used in decorations as follows.\n *\n * ```ts\n * document.createTextNode(ZERO_WIDTH_SPACE_CHAR);\n * ```\n *\n * This produces the html entity '8203'\n */\nexport const ZERO_WIDTH_SPACE_CHAR = '\\u200B';\n\n/**\n * The non breaking space character.\n */\nexport const NON_BREAKING_SPACE_CHAR = '\\u00A0';\n\n/**\n * A default empty object node. Useful for resetting the content of a\n * prosemirror document.\n */\nexport const EMPTY_PARAGRAPH_NODE = {\n  type: 'doc',\n  content: [\n    {\n      type: 'paragraph',\n    },\n  ],\n};\n\nexport const EMPTY_NODE = {\n  type: 'doc',\n  content: [],\n};\n\n/**\n * The type for the extension tags..\n */\nexport type ExtensionTag = Remirror.ExtensionTags & typeof BaseExtensionTag;\n\n/**\n * A method for updating the extension tags.\n *\n * ```tsx\n * import { ExtensionTag, mutateTag } from 'remirror';\n *\n * mutateTag((tag) => {\n *   tag.SuperCustom = 'superCustom';\n * });\n *\n * declare global {\n *   namespace Remirror {\n *     interface ExtensionTag {\n *       SuperCustom: 'superCustom';\n *     }\n *   }\n * }\n *\n *\n * log(ExtensionTag.SuperCustom); // This is fine \u2705\n * log(ExtensionTag.NotDefined); // This will throw \u274C\n * ```\n */\nexport function mutateTag(mutator: (Tag: ExtensionTag) => void): void {\n  mutator(BaseExtensionTag);\n}\n\nconst BaseExtensionTag = {\n  /**\n   * Describes a node that can be used as the last node of a document and\n   * doesn't need to have anything else rendered after itself.\n   *\n   * @remarks\n   *\n   * e.g. `paragraph`\n   */\n  LastNodeCompatible: 'lastNodeCompatible',\n\n  /**\n   * A mark that is used to change the formatting of the node it wraps.\n   *\n   * @remarks\n   *\n   * e.g. `bold`, `italic`\n   */\n  FormattingMark: 'formattingMark',\n\n  /**\n   * A node that formats text in a non-standard way.\n   *\n   * @remarks\n   *\n   * e.g. `codeBlock`, `heading`, `blockquote`\n   */\n  FormattingNode: 'formattingNode',\n\n  /**\n   * Identifies a node which has problems with cursor navigation.\n   *\n   * @remarks\n   *\n   * When this tag is added to an extension this will be picked up by\n   * behavioural extensions such as the NodeCursorExtension which makes hard to\n   * reach nodes reachable using keyboard arrows.\n   */\n  NodeCursor: 'nodeCursor',\n\n  /**\n   * Mark group for font styling (e.g. bold, italic, underline, superscript).\n   */\n  FontStyle: 'fontStyle',\n\n  /**\n   * Mark groups for links.\n   */\n  Link: 'link',\n\n  /**\n   * Mark groups for colors (text-color, background-color, etc).\n   */\n  Color: 'color',\n\n  /**\n   * Mark group for alignment.\n   */\n  Alignment: 'alignment',\n\n  /**\n   * Mark group for indentation.\n   */\n  Indentation: 'indentation',\n\n  /**\n   * Extension which affect the behaviour of the content. Can be nodes marks or\n   * plain.\n   */\n  Behavior: 'behavior',\n\n  /**\n   * Marks and nodes which contain code.\n   */\n  Code: 'code',\n\n  /**\n   * Whether this node is an inline node.\n   *\n   * - `text` is an inline node, but `paragraph` is a block node.\n   */\n  InlineNode: 'inline',\n\n  /**\n   * This is a node that can contain list items.\n   */\n  ListContainerNode: 'listContainer',\n\n  /**\n   * Tags the extension as a list item node which can be contained by\n   * [[`ExtensionTag.ListNode`]].\n   */\n  ListItemNode: 'listItemNode',\n\n  /**\n   * Sets this as a block level node.\n   */\n  Block: 'block',\n\n  /**\n   * @deprecate use `ExtensionTags.Block` instead.\n   */\n  BlockNode: 'block',\n\n  /**\n   * Set this as a text block\n   */\n  TextBlock: 'textBlock',\n\n  /**\n   * A tag that excludes this from input rules.\n   */\n  ExcludeInputRules: 'excludeFromInputRules',\n\n  /**\n   * A mark or node that can't  be exited when at the end and beginning of the\n   * document with an arrow key or backspace key.\n   */\n  PreventExits: 'preventsExits',\n\n  /**\n   * Represents a media compatible node.\n   */\n  Media: 'media',\n} as const;\n\n/**\n * These are the default supported tag strings which help categorize different\n * behaviors that extensions can exhibit.\n *\n * @remarks\n *\n * Any extension can register itself with multiple such behaviors and these\n * categorizations can be used by other extensions when running commands and\n * updating the document.\n */\nexport const ExtensionTag = BaseExtensionTag as ExtensionTag;\n\n/**\n * The string values which can be used as extension tags.\n */\nexport type ExtensionTagType = ExtensionTag[keyof ExtensionTag];\n\n/**\n * The identifier key which is used to check objects for whether they are a\n * certain type.\n *\n * @remarks\n *\n * Just pretend you don't know this exists.\n *\n * @internal\n */\nexport const __INTERNAL_REMIRROR_IDENTIFIER_KEY__: unique symbol = Symbol.for('__remirror__');\n\n/**\n * These constants are stored on the `REMIRROR_IDENTIFIER_KEY` property of\n * `remirror` related constructors and instances in order to identify them as\n * being internal to Remirror.\n *\n * @remarks\n *\n * This helps to prevent issues around check types via `instanceof` which can\n * lead to false negatives.\n *\n * @internal\n */\nexport enum RemirrorIdentifier {\n  /**\n   * Identifies `PlainExtension`s.\n   */\n  PlainExtension = 'RemirrorPlainExtension',\n\n  /**\n   * Identifies `NodeExtension`s.\n   */\n  NodeExtension = 'RemirrorNodeExtension',\n\n  /**\n   * Identifies `MarkExtension`s.\n   */\n  MarkExtension = 'RemirrorMarkExtension',\n\n  /**\n   * Identifies `PlainExtensionConstructor`s.\n   */\n  PlainExtensionConstructor = 'RemirrorPlainExtensionConstructor',\n\n  /**\n   * Identifies `NodeExtensionConstructor`s.\n   */\n  NodeExtensionConstructor = 'RemirrorNodeExtensionConstructor',\n\n  /**\n   * Identifies `MarkExtensionConstructor`s.\n   */\n  MarkExtensionConstructor = 'RemirrorMarkExtensionConstructor',\n\n  /**\n   * The string used to identify an instance of the `Manager`\n   */\n  Manager = 'RemirrorManager',\n\n  /**\n   * The preset type identifier.\n   */\n  Preset = 'RemirrorPreset',\n\n  /**\n   * The preset type identifier.\n   */\n  PresetConstructor = 'RemirrorPresetConstructor',\n}\n\n/**\n * The priority of extension which determines what order it is loaded into the\n * editor.\n *\n * @remarks\n *\n * Higher priority extension (higher numberic value) will ensure the extension\n * has a higher preference in your editor. In the case where you load two\n * identical extensions into your editor (same name, or same constructor), the\n * extension with the  higher priority is the one that will be loaded.\n *\n * The higher the numeric value the higher the priority. The priority can also\n * be passed a number but naming things in this `enum` should help provide some\n * context to the numbers.\n *\n * By default all extensions are created with a `ExtensionPriority.Default`.\n */\nexport enum ExtensionPriority {\n  /**\n   * Use this **never** \uD83D\uDE09\n   */\n  Critical = 1_000_000,\n\n  /**\n   * A, like super duper, high priority.\n   */\n  Highest = 100_000,\n\n  /**\n   * The highest priority level that should be used in a publicly shared\n   * extension (to allow some wiggle room for downstream users overriding\n   * priorities).\n   */\n  High = 10_000,\n\n  /**\n   * A medium priority extension. This is typically all you need to take\n   * priority over built in extensions.\n   */\n  Medium = 1000,\n\n  /**\n   * This is the **default** priority for most extensions.\n   */\n  Default = 100,\n\n  /**\n   * This is the **default** priority for builtin behavior changing extensions.\n   */\n  Low = 10,\n\n  /**\n   * This is useful for extensions that exist to be overridden.\n   */\n  Lowest = 0,\n}\n\n/**\n * Identifies the stage the extension manager is at.\n */\nexport enum ManagerPhase {\n  /**\n   * The initial value for the manager phase.\n   */\n  None,\n\n  /**\n   * When the extension manager is being created and the onCreate methods are\n   * being called.\n   *\n   * This happens within the RemirrorManager constructor.\n   */\n  Create,\n\n  /**\n   * When the view is being added and all `onView` lifecycle methods are being\n   * called. The view is typically added before the dom is ready for it.\n   */\n  EditorView,\n\n  /**\n   * The phases of creating this manager are completed and `onTransaction` is\n   * called every time the state updates.\n   */\n  Runtime,\n\n  /**\n   * The manager is being destroyed.\n   */\n  Destroy,\n}\n\n/**\n * The named shortcuts that can be used to update multiple commands.\n */\nexport enum NamedShortcut {\n  Undo = '_|undo|_',\n  Redo = '_|redo|_',\n  Bold = '_|bold|_',\n  Italic = '_|italic|_',\n  Underline = '_|underline|_',\n  Strike = '_|strike|_',\n  Code = '_|code|_',\n  Paragraph = '_|paragraph|_',\n  H1 = '_|h1|_',\n  H2 = '_|h2|_',\n  H3 = '_|h3|_',\n  H4 = '_|h4|_',\n  H5 = '_|h5|_',\n  H6 = '_|h6|_',\n  TaskList = '_|task|_',\n  BulletList = '_|bullet|_',\n  OrderedList = '_|number|_',\n  Quote = '_|quote|_',\n  Divider = '_|divider|_',\n  Codeblock = '_|codeblock|_',\n  ClearFormatting = '_|clear|_',\n  Superscript = '_|sup|_',\n  Subscript = '_|sub|_',\n  LeftAlignment = '_|left-align|_',\n  CenterAlignment = '_|center-align|_',\n  RightAlignment = '_|right-align|_',\n  JustifyAlignment = '_|justify-align|_',\n  InsertLink = '_|link|_',\n  Find = '_|find|_',\n  FindBackwards = '_|find-backwards|_',\n  FindReplace = '_|find-replace|_',\n  AddFootnote = '_|footnote|_',\n  AddComment = '_|comment|_',\n  ContextMenu = '_|context-menu|_',\n  IncreaseFontSize = '_|inc-font-size|_',\n  DecreaseFontSize = '_|dec-font-size|_',\n  IncreaseIndent = '_|indent|_',\n  DecreaseIndent = '_|dedent|_',\n  Shortcuts = '_|shortcuts|_',\n  Copy = '_|copy|_',\n  Cut = '_|cut|_',\n  Paste = '_|paste|_',\n  PastePlain = '_|paste-plain|_',\n  SelectAll = '_|select-all|_',\n\n  /**\n   * A keyboard shortcut to trigger formatting the current block.\n   *\n   * @defaultValue 'Alt-Shift-F' (Mac) | 'Shift-Ctrl-F' (PC)\n   */\n  Format = '_|format|_',\n}\n\n/**\n * Helpful empty array for use when a default array value is needed.\n *\n * DO NOT MUTATE!\n */\nexport const EMPTY_ARRAY: never[] = [];\n\ndeclare global {\n  namespace Remirror {\n    /**\n     * This interface is for extending the default `ExtensionTag`'s in your\n     * codebase with full type checking support.\n     */\n    interface ExtensionTags {}\n  }\n}\n", "/**\n * The error codes for errors used throughout the codebase.\n *\n * @remarks\n *\n * They can be removed but should never be changed since they are also used to\n * reference the errors within search engines.\n */\nexport enum ErrorConstant {\n  /** An error occurred in production. Details shall be hidden.\n   *\n   * @deprecated - We don't hide the error details in production anymore.\n   */\n  PROD = 'RMR0000',\n\n  /** An error happened but we're not quite sure why. */\n  UNKNOWN = 'RMR0001',\n\n  /** The arguments passed to the command method were invalid. */\n  INVALID_COMMAND_ARGUMENTS = 'RMR0002',\n\n  /** This is a custom error possibly thrown by an external library. */\n  CUSTOM = 'RMR0003',\n\n  /**\n   * An error occurred in a function called from the `@remirror/core-helpers`\n   * library.\n   */\n  CORE_HELPERS = 'RMR0004',\n\n  /** You have attempted to change a value that shouldn't be changed. */\n  MUTATION = 'RMR0005',\n\n  /**\n   * This is an error which should not occur and is internal to the remirror\n   * codebase.\n   */\n  INTERNAL = 'RMR0006',\n\n  /** You're editor is missing a required extension. */\n  MISSING_REQUIRED_EXTENSION = 'RMR0007',\n\n  /**\n   * Called a method event at the wrong time. Please make sure getter functions\n   * are only called with within the scope of the returned functions. They\n   * should not be called in the outer scope of your method.\n   */\n  MANAGER_PHASE_ERROR = 'RMR0008',\n\n  /**\n   * The user requested an invalid extension from the getExtensions method.\n   * Please check the `createExtensions` return method is returning an extension\n   * with the defined constructor.\n   */\n  INVALID_GET_EXTENSION = 'RMR0010',\n\n  /**\n   * Invalid value passed into `Manager constructor`. Only and\n   * `Extensions` are supported.\n   */\n  INVALID_MANAGER_ARGUMENTS = 'RMR0011',\n\n  /**\n   * There is a problem with the schema or you are trying to access a node /\n   * mark that doesn't exists.\n   */\n  SCHEMA = 'RMR0012',\n\n  /**\n   * The `helpers` method which is passed into the ``create*` method should only\n   * be called within returned method since it relies on an active view (not\n   * present in the outer scope).\n   */\n  HELPERS_CALLED_IN_OUTER_SCOPE = 'RMR0013',\n\n  /** The user requested an invalid extension from the manager. */\n  INVALID_MANAGER_EXTENSION = 'RMR0014',\n\n  /** Command method names must be unique within the editor. */\n  DUPLICATE_COMMAND_NAMES = 'RMR0016',\n\n  /** Helper method names must be unique within the editor. */\n  DUPLICATE_HELPER_NAMES = 'RMR0017',\n\n  /** Attempted to chain a non chainable command. */\n  NON_CHAINABLE_COMMAND = 'RMR0018',\n\n  /** The provided extension is invalid. */\n  INVALID_EXTENSION = 'RMR0019',\n\n  /** The content provided to the editor is not supported. */\n  INVALID_CONTENT = 'RMR0021',\n\n  /** An invalid name was used for the extension. */\n  INVALID_NAME = 'RMR0050',\n\n  /** An error occurred within an extension. */\n  EXTENSION = 'RMR0100',\n\n  /** The spec was defined without calling the `defaults`, `parse` or `dom` methods. */\n  EXTENSION_SPEC = 'RMR0101',\n\n  /** Extra attributes must either be a string or an object. */\n  EXTENSION_EXTRA_ATTRIBUTES = 'RMR0102',\n\n  /** A call to `extension.setOptions` was made with invalid keys. */\n  INVALID_SET_EXTENSION_OPTIONS = 'RMR0103',\n\n  /**\n   * `useRemirror` was called outside of the remirror context. It can only be used\n   * within an active remirror context created by the `<Remirror />`.\n   */\n  REACT_PROVIDER_CONTEXT = 'RMR0200',\n\n  /**\n   * `getRootProps` has been called MULTIPLE times. It should only be called ONCE during render.\n   */\n  REACT_GET_ROOT_PROPS = 'RMR0201',\n\n  /**\n   * A problem occurred adding the editor view to the dom.\n   */\n  REACT_EDITOR_VIEW = 'RMR0202',\n\n  /**\n   * There is a problem with your controlled editor setup.\n   */\n  REACT_CONTROLLED = 'RMR0203',\n\n  /**\n   * Something went wrong with your custom ReactNodeView Component.\n   */\n  REACT_NODE_VIEW = 'RMR0204',\n\n  /**\n   * You attempted to call `getContext` provided by the `useRemirror` prop\n   * during the first render of the editor. This is not possible and should only\n   * be after the editor first mounts.\n   */\n  REACT_GET_CONTEXT = 'RMR0205',\n\n  /**\n   * An error occurred when rendering the react components.\n   */\n  REACT_COMPONENTS = 'RMR0206',\n\n  /**\n   * An error occurred within a remirror hook.\n   */\n  REACT_HOOKS = 'RMR0207',\n\n  /**\n   * There is something wrong with your i18n setup.\n   */\n  I18N_CONTEXT = 'RMR0300',\n}\n"],
  "mappings": "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",
  "names": []
}
